<div id="status">
  <%= render partial: "status_replica", locals: { replica: @replica } %>
  <%= render partial: "status_long_running_queries", locals: { queries: @queries } %>
  <div class="alert alert-<%= @good_cache_rate ? "success" : "warning" %>">
    <% if @good_cache_rate %>
      Cache hit rate above <%= PgHero.cache_hit_rate_threshold %>%
    <% else %>
      Low cache hit rate
    <% end %>
  </div>
  <div class="alert alert-<%= @good_total_connections ? "success" : "warning" %>">
    <% if @good_total_connections %>
      Healthy number of connections
    <% else %>
      High number of connections
    <% end %>
    <span class="tiny"><%= @total_connections %></span>
  </div>
  <div class="alert alert-<%= @transaction_id_danger.empty? ? "success" : "warning" %>">
    <% if @transaction_id_danger.any? %>
      <%= pluralize(@transaction_id_danger.size, "table") %> not vacuuming properly
    <% else %>
      Vacuuming healthy
    <% end %>
  </div>
  <%= render partial: "status_invalid_indexes", locals: { indexes: @indexes.invalid } %>

  <%= render partial: "indexes", locals: { indexes: @indexes, suggested: @suggested_indexes } %>

  <%= render partial: "status_slow_queries", locals: { queries: @queries } %>
</div>

<%= render partial: "replica", locals: { replica: @replica } %>

<% if @queries.long_running.any? %>
  <div class="content">
    <%= button_to "Kill All", kill_long_running_queries_path, class: "btn btn-danger", style: "float: right;" %>
    <h1>Long Running Queries</h1>

    <%= render partial: "live_queries_table", locals: {queries: @queries.long_running } %>
  </div>
<% end %>

<% if !@good_cache_rate %>
  <div class="content">
    <h1>Low Cache Hit Rate</h1>

    <p>
      Index Hit Rate: <%= (@index_hit_rate * 100).round(1) %>%
      <br />
      Table Hit Rate: <%= (@table_hit_rate * 100).round(1) %>%
    </p>

    <p>
      The cache hit rate <%= link_to "should be above 99%", "https://devcenter.heroku.com/articles/understanding-postgres-data-caching", target: "_blank" %> in most cases.  You can often increase this by adding more memory.
      <!-- TODO better suggestions -->
    </p>
  </div>
<% end %>

<% if !@good_total_connections %>
  <div class="content">
    <h1>High Number of Connections</h1>
    <%= render partial: "connections_table", locals: {total_connections: @total_connections, connection_sources: PgHero.connection_sources(by_database: true).first(10), show_message: true} %>
  </div>
<% end %>

<% if @transaction_id_danger.any? %>
  <div class="content">
    <h2>Vacuuming Needed</h2>
    <p>The database <strong>will shutdown</strong> when there are fewer than 1,000,000 transactions left. <%= link_to "Read more", "http://www.postgresql.org/docs/9.1/static/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND", target: "_blank" %>.</p>
    <p>For each table, run:</p>
    <code><pre>VACUUM FREEZE VERBOSE table</pre></code>
    <table class="table">
      <thead>
        <tr>
          <th>Table</th>
          <th style="width: 20%;">Transactions Left</th>
        </tr>
      </thead>
      <tbody>
        <% @transaction_id_danger.each do |query| %>
          <tr>
            <td><%= query["table"] %></td>
            <td><%= number_with_delimiter(query["transactions_before_shutdown"]) %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% end %>

<%= render partial: "invalid_indexes", locals: { indexes: @indexes } %>

<% if @suggested_indexes.any? %>
  <div class="content">
    <h1>Suggested Indexes</h1>
    <p>
      Add indexes to speed up queries.
      <% if @show_migrations %>
      Hereâ€™s a
      <a href="javascript: void(0);" onclick="document.getElementById('migration3').style.display = 'block';">migration</a> to help.
      <% end %>
    </p>

    <div id="migration3" style="display: none;">
      <pre>rails g migration add_suggested_indexes</pre>
      <p>And paste</p>
      <pre style="overflow: scroll; white-space: pre; word-break: normal;"><% @suggested_indexes.each do |index| %>
<% if index[:using] == "gist" %>
connection.execute("CREATE INDEX CONCURRENTLY ON <%= index[:table] %><% if index[:using] %> USING <%= index[:using] %><% end %> (<%= index[:columns].join(", ") %>)")
<% else %>
add_index <%= index[:table].to_sym.inspect %>, [<%= index[:columns].map(&:to_sym).map(&:inspect).join(", ") %>], algorithm: :concurrently<% end %><% end %></pre>
    </div>

    <% @suggested_indexes.each_with_index do |index, i| %>
      <hr />
      <%= render partial: "suggested_index", locals: {index: index, details: index[:details]} %>
      <p>to speed up</p>
      <%= render partial: "queries_table", locals: {queries: index[:queries].map { |q| @query_stats_by_query[q] }, suggested_indexes: false} %>
    <% end %>
  </div>
<% end %>

<%= render partial: "missing_indexes", locals: { indexes: @indexes } %>

<%= render partial: "query_stats", locals: { queries: @queries} %>

<%= render partial: "slow_queries", locals: { queries: @queries } %>
